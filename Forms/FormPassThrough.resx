<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>How to Use PII Vault Pass-Through Anonymization Sample Application

Overview
This application was written to provide an example of the capabilities of the PII Vault. It shows business users what types of functions can be built and provides sample code to software developers on how to deliver that type of functionality.
In this window the user can anonymize data by either A) Redacting PII values in the data or B) Masking those same values. (Data Masking is the replacement of real PII values with fake values) Whether this page will redact or mask depends on which option was selected from the main window.

Setup
Before you use this window, you will need to go to the Settings page and create, or select, a PII Vault environment. If you have already created one then it will, by default be auto-selected the next time you run this application.
When you create a new environment, you will need to provide two sets of Account Ids and API Keys. These are received by the identified party when new accounts are created in the PII Vault UI. You cannot create them here. 
Two sets of these credentials are required by this app because two sets are needed to perform Anonymous Data Matching.

Data Source
Data can be loaded either from a CSV file or from a Teradata database query. 

How to Use 
To use this application for Pass-Through Anonymization is as simple as 1-2-3.  

Step 1: Load Data. This menu option will give you the opportunity to select a CSV file. That file should have both PII and non-PII data columns. Once selected the data from that file will show in the tab labeled Data.

Step 2: Define Schema. The first time you load a specific data file you will need to use this step to initialize the schema definition. If you have already done that, and saved the schema definition it will likely load automatically when you re-load the data file it was based from.
What the schema file is, is a definition of the data file loaded in step one. It lists each of the columns and allows you to specify which columns are PII and which are not. For those columns that are PII, you should specify what type of PII they are. 
If you happen to have multiple copies of the same type of PII, for example two sets of addresses, you should specify one set with a grouping value of 0 and the second set with a grouping value of 1. This lets the address, city and state values to group together appropriately.

Step 3: View Results. When you select this third step you will be presented with an option to pick which account to use. As stated earlier in the Setup section, you should have two accounts. If you setup the environment properly all you need do on this dialog is select if you are using Account 1 or Account 2. 
To see how the Anonymous Data Matching works, you should load one set of data with Account 1 and another set of data, with some of the same people in it, using Account 2.

Once the account is selected the data loaded in Step 1 will be anonymized, the PII will be either redacted or masked, and the results visible on the View Results tab.
Save Results:  You can use this option to save the anonymized data.

Re-Identify
The final option is to re-identify data using the PII Vault. It must be noted that not every version of the PII Vault includes this capability. It is a security measure that some users of the PII Vault want to ensure that no one can ever re-identify their anonymous data.

If this option is available, you can use this tab to see how it works.  First go through the earlier steps to anonymize data.  Once that is done you can use the Populate Poly-IDs button to get the anonymous Poly-IDs from the View Results tab.
Finally, the Re-Identify button will obtain the PII from the PII Vault for each of those Poly-IDs.</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>Use this grid to define which columns in the schema are PII. Non-PII values may be classifed as 'Non-PII' or left blank. If there are multiple versions of a value such as addresses, phone numbers or keys (i.e. Work, Home, etc.) use the same Grouping value to group different elements (i.e. street addresses, and cities), together. Columns marked as 'Redact Data' will not pass through and be available. Columns may be both PII and Redacted (ex: City, State, Zip).</value>
  </data>
  <metadata name="ColumnName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="ColumnType.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Group.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="RedactData.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="PolyId.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="FirstName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="LastName.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Gender.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Address1.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="City.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="State.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Zip.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Phone.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Email.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>25</value>
  </metadata>
</root>